using Microsoft.AspNetCore.Mvc;

[ApiController]
[Route("api/[controller]")]
public class LogsController : ControllerBase
{
    // Exibe os logs de autenticação
    [HttpGet("autenticacao")]
    public IActionResult GetAuthenticationLogs()
    {
        var logs = LoggingMiddleware.GetLogsByType("Autenticação");
        return Ok(logs);
    }

    // Exibe os logs de request
    [HttpGet("request")]
    public IActionResult GetRequestLogs()
    {
        var logs = LoggingMiddleware.GetLogsByType("Request");
        return Ok(logs);
    }

    // Exibe os logs de response
    [HttpGet("response")]
    public IActionResult GetResponseLogs()
    {
        var logs = LoggingMiddleware.GetLogsByType("Response");
        return Ok(logs);
    }
}
    
	
	
	using System.Collections.Concurrent;
using System.Net.Http;
using System.IO;

public class LoggingMiddleware
{
    private readonly RequestDelegate _next;
    private readonly HttpClient _httpClient;
    private static readonly ConcurrentBag<string> Logs = new ConcurrentBag<string>();

    public LoggingMiddleware(RequestDelegate next, HttpClient httpClient)
    {
        _next = next;
        _httpClient = httpClient;
    }

    public async Task InvokeAsync(HttpContext context)
    {
        // Log da autenticação
        await LogAuthentication(context);

        // Log do request
        await LogRequest(context);

        // Log do response
        await LogResponse(context);
    }

    private Task LogAuthentication(HttpContext context)
    {
        var user = context.User.Identity?.IsAuthenticated == true ? context.User.Identity.Name : "Anônimo";
        Logs.Add($"Autenticação: {user}");
        return Task.CompletedTask;
    }

    private async Task LogRequest(HttpContext context)
    {
        context.Request.EnableBuffering();
        using var reader = new StreamReader(context.Request.Body, leaveOpen: true);
        var requestBody = await reader.ReadToEndAsync();
        Logs.Add($"Request: {requestBody}");
        context.Request.Body.Position = 0;
    }

    private async Task LogResponse(HttpContext context)
    {
        var originalResponseBodyStream = context.Response.Body;
        await using var responseBody = new MemoryStream();
        context.Response.Body = responseBody;

        await _next(context);

        var uolResponse = await _httpClient.GetStringAsync("https://www.uol.com.br");
        Logs.Add($"Consulta UOL: {uolResponse.Substring(0, 200)}...");

        context.Response.Body.Seek(0, SeekOrigin.Begin);
        var responseBodyText = await new StreamReader(context.Response.Body).ReadToEndAsync();
        context.Response.Body.Seek(0, SeekOrigin.Begin);
        Logs.Add($"Response: {responseBodyText}");

        await responseBody.CopyToAsync(originalResponseBodyStream);
    }

    // Método para obter logs de um tipo específico
    public static IEnumerable<string> GetLogsByType(string logType) => Logs.Where(log => log.StartsWith(logType));
}



var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

// Registra o HttpClient para o middleware
builder.Services.AddHttpClient<LoggingMiddleware>();

var app = builder.Build();

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();
app.UseMiddleware<LoggingMiddleware>();
app.UseAuthorization();

app.MapControllers();
app.Run();
