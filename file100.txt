Aqui está a versão atualizada para sua Web API em C# 8, com Dapper e logs organizados em uma camada de infra. Vou manter a estrutura com controllers e dividir as responsabilidades entre as camadas.

1. Camada de Infraestrutura (Infra)
Crie uma pasta chamada Infra, e dentro dela, crie os seguintes arquivos:

a. Repositório de Logs (LogRepository.cs)
csharp
Copy code
using Dapper;
using System.Data;

namespace Infra.Repositories
{
    public interface ILogRepository
    {
        Task LogRequestResponseAsync(string request, string response, DateTime timestamp);
    }

    public class LogRepository : ILogRepository
    {
        private readonly IDbConnection _dbConnection;

        public LogRepository(IDbConnection dbConnection)
        {
            _dbConnection = dbConnection;
        }

        public async Task LogRequestResponseAsync(string request, string response, DateTime timestamp)
        {
            var query = @"INSERT INTO Logs (Request, Response, Timestamp) VALUES (@Request, @Response, @Timestamp)";
            await _dbConnection.ExecuteAsync(query, new { Request = request, Response = response, Timestamp = timestamp });
        }
    }
}
b. Repositório de Usuários (UserRepository.cs)
csharp
Copy code
using Dapper;
using System.Data;

namespace Infra.Repositories
{
    public interface IUserRepository
    {
        Task<User?> GetUserAsync(string username);
        Task<IEnumerable<string>> GetRolesForUserAsync(int userId);
    }

    public class UserRepository : IUserRepository
    {
        private readonly IDbConnection _dbConnection;

        public UserRepository(IDbConnection dbConnection)
        {
            _dbConnection = dbConnection;
        }

        public async Task<User?> GetUserAsync(string username)
        {
            var query = @"SELECT * FROM Users WHERE Username = @Username";
            return await _dbConnection.QuerySingleOrDefaultAsync<User>(query, new { Username = username });
        }

        public async Task<IEnumerable<string>> GetRolesForUserAsync(int userId)
        {
            var query = @"
                SELECT r.Name
                FROM Roles r
                JOIN UserRoles ur ON r.Id = ur.RoleId
                WHERE ur.UserId = @UserId";
            return await _dbConnection.QueryAsync<string>(query, new { UserId = userId });
        }
    }
}
2. Camada de Aplicação
a. Middleware de Logs (RequestResponseLoggingMiddleware.cs)
csharp
Copy code
using Infra.Repositories;
using System.IO;
using System.Threading.Tasks;

public class RequestResponseLoggingMiddleware
{
    private readonly RequestDelegate _next;
    private readonly ILogRepository _logRepository;

    public RequestResponseLoggingMiddleware(RequestDelegate next, ILogRepository logRepository)
    {
        _next = next;
        _logRepository = logRepository;
    }

    public async Task InvokeAsync(HttpContext context)
    {
        // Log Request
        var request = await FormatRequest(context.Request);

        // Call the next middleware
        await _next(context);

        // Log Response
        var response = context.Response.StatusCode.ToString();
        await _logRepository.LogRequestResponseAsync(request, response, DateTime.Now);
    }

    private async Task<string> FormatRequest(HttpRequest request)
    {
        request.EnableBuffering();
        var body = request.Body;
        var buffer = new byte[Convert.ToInt32(request.ContentLength)];
        await request.Body.ReadAsync(buffer, 0, buffer.Length);
        var bodyAsText = Encoding.UTF8.GetString(buffer);
        request.Body.Seek(0, SeekOrigin.Begin);
        return $"{request.Method} {request.Path} {bodyAsText}";
    }
}
3. Camada de Apresentação (Web API)
a. Controller de Autenticação (AuthController.cs)
csharp
Copy code
using Infra.Repositories;
using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace LegumesAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AuthController : ControllerBase
    {
        private readonly IUserRepository _userRepository;

        public AuthController(IUserRepository userRepository)
        {
            _userRepository = userRepository;
        }

        [HttpPost("login")]
        public async Task<IActionResult> Login([FromBody] UserLogin userLogin)
        {
            var user = await _userRepository.GetUserAsync(userLogin.Username);
            if (user == null || !BCrypt.Net.BCrypt.Verify(userLogin.Password, user.PasswordHash))
                return Unauthorized();

            var roles = await _userRepository.GetRolesForUserAsync(user.Id);
            var token = GenerateJwtToken(user.Username, roles);
            return Ok(new { token });
        }

        private string GenerateJwtToken(string username, IEnumerable<string> roles)
        {
            var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes("YourSecretKeyHereYourSecretKeyHere"));
            var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);

            var claims = new List<Claim>
            {
                new Claim(JwtRegisteredClaimNames.Sub, username),
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
            };

            claims.AddRange(roles.Select(role => new Claim(ClaimTypes.Role, role)));

            var token = new JwtSecurityToken(
                issuer: "yourdomain.com",
                audience: "yourdomain.com",
                claims: claims,
                expires: DateTime.Now.AddMinutes(30),
                signingCredentials: credentials);

            return new JwtSecurityTokenHandler().WriteToken(token);
        }
    }
}
b. Controller de Legumes (LegumesController.cs)
csharp
Copy code
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace LegumesAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class LegumesController : ControllerBase
    {
        [HttpGet]
        [Authorize(Policy = "GetPolicy")]
        public IActionResult GetLegumes()
        {
            var legumes = new List<string>
            {
                "Cenoura", "Batata", "Tomate", "Pepino"
            };

            return Ok(legumes);
        }

        [HttpPost]
        [Authorize(Policy = "PostPolicy")]
        public IActionResult AddLegume([FromBody] string legume)
        {
            return Ok($"Legume {legume} adicionado.");
        }
    }
}
4. Program.cs
Agora, configure tudo no Program.cs:

csharp
Copy code
using Infra.Repositories;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Data;
using System.Data.SqlClient;
using System.Text;

var builder = WebApplication.CreateBuilder(args);

// Dapper + SQL Server
builder.Services.AddTransient<IDbConnection>(sp =>
    new SqlConnection(builder.Configuration.GetConnectionString("DefaultConnection")));
builder.Services.AddScoped<IUserRepository, UserRepository>();
builder.Services.AddScoped<ILogRepository, LogRepository>();

// Autenticação JWT
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = "yourdomain.com",
            ValidAudience = "yourdomain.com",
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes("YourSecretKeyHereYourSecretKeyHere"))
        };
    });

// Autorização com Policies
builder.Services.AddAuthorization(options =>
{
    options.AddPolicy("GetPolicy", policy => policy.RequireRole("GetRole"));
    options.AddPolicy("PostPolicy", policy => policy.RequireRole("PostRole"));
});

// Controllers e Swagger
builder.Services.AddControllers();
builder.Services.AddSwaggerGen();

var app = builder.Build();

// Middleware de Logs
app.UseMiddleware<RequestResponseLoggingMiddleware>();

// Swagger e autenticação
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();

app.Run();
Estrutura de Tabelas para Logs
sql
Copy code
CREATE TABLE Logs (
    Id INT PRIMARY KEY IDENTITY,
    Request NVARCHAR(MAX),
    Response NVARCHAR(100),
    Timestamp DATETIME
);